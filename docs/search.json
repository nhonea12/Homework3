[
  {
    "objectID": "control_flow_functions.html",
    "href": "control_flow_functions.html",
    "title": "Homework 3",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nload(\"hw2_list.rda\")\n\n\nTask 1: Control Flow Practice\nIn this section, I create empty character variables called status in both the treatment and placebo data frames within bp_list.\nI then fill each status variable for each observation, taking on one of three values:\n\n“high”\n“borderline”\n“optimal”\n\ndepending on the post-treatment blood pressure score. This is done using separate for loops for each data frame, with if/then/else logic used to assign the status values.\n\n# add status column to both the treatment and placebo data frames stored in bp_list\nbp_list$treatment$status &lt;- character(20)\nbp_list$placebo$status &lt;- character(10)\n\n# use if/then/else logic in a for loop to create values for status variable in treatment data frame\nfor (i in 1:length(bp_list$treatment$status)) {\n  if (bp_list$treatment$post_bp[i] &gt; 130){\n    bp_list$treatment$status[i] = \"high\"\n  } else if (bp_list$treatment$post_bp[i] &lt;= 130 & \n             bp_list$treatment$post_bp[i] &gt; 120){\n    bp_list$treatment$status[i] = \"borderline\"\n  } else if (bp_list$treatment$post_bp[i] &lt;= 120){\n    bp_list$treatment$status[i] = \"optimal\"\n  }\n}\n\n# use if/then/else logic in a for loop to create values for status variable in placebo data frame\nfor (i in 1:length(bp_list$placebo$status)) {\n  if (bp_list$placebo$post_bp[i] &gt; 130){\n    bp_list$placebo$status[i] = \"high\"\n  } else if (bp_list$placebo$post_bp[i] &lt;= 130 & \n             bp_list$placebo$post_bp[i] &gt; 120){\n    bp_list$placebo$status[i] = \"borderline\"\n  } else if (bp_list$placebo$post_bp[i] &lt;= 120){\n    bp_list$placebo$status[i] = \"optimal\"\n  }\n}\n\n\n\nTask 2: Function Writing\nThe below function is written to take any list that includes two data frames treatment and placebo. It also takes in a function within a quoted string that is used to summarize the pre_bp, post_bp, and diff_bp variables in these data frames, with this function having a default value of “mean”.\nThe function stores each data frame as an object, accesses the summary function using get(stat), and then stores the summary values from the variables of interest in objects. The objects are then combined into a vector of length six, and names are assigned to the vector by creating a vector where names are dynamically created using paste0 and the user assigned value in the stat function (which again, defaults to “mean”). This vector of dynamic names is stored as the names of the vector of values using the names() function, and the now named vector of summary values is output using the return() function.\n\n# write a function that takes in a list with two data frames in it and function to find a summary of a numeric column with a default of \"mean\"\noutput_summary_stats &lt;- function(list, stat = \"mean\") {\n  #store the treatment and placebo data frames in the list as objects\n  treatment &lt;- list$treatment\n  placebo &lt;- list$placebo\n  \n  #get the function from the quoted string\n  my_fun &lt;- get(stat) \n  \n  # get summary stats using sum_function\n  pre_trt &lt;- my_fun(treatment$pre_bp)\n  post_trt &lt;- my_fun(treatment$post_bp)\n  diff_trt &lt;- my_fun(treatment$diff_bp)\n  pre_plac &lt;- my_fun(placebo$pre_bp)\n  post_plac &lt;- my_fun(placebo$post_bp)\n  diff_plac &lt;- my_fun(placebo$diff_bp)\n  \n  # combine summary stats into a vector\n  summary_vector &lt;- c(pre_trt, post_trt, diff_trt, pre_plac, post_plac, diff_plac)\n  \n  # give the values in the vector useful and relevant names\n  names(summary_vector) &lt;- c(paste0(stat,\"_pre_trt\"), paste0(stat,\"_post_trt\"), paste0(stat,\"_diff_trt\"), paste0(stat,\"_pre_plac\"), paste0(stat,\"_post_plac\"), paste0(stat,\"_diff_plac\"))\n  \n  return(summary_vector)\n}\n\n# treatment and placebo means\noutput_summary_stats(bp_list)\n\n  mean_pre_trt  mean_post_trt  mean_diff_trt  mean_pre_plac mean_post_plac \n        131.60         125.95           5.65         131.90         128.90 \nmean_diff_plac \n          3.00 \n\n# treatment and placebo variances\noutput_summary_stats(bp_list, stat = \"var\")\n\n  var_pre_trt  var_post_trt  var_diff_trt  var_pre_plac var_post_plac \n     75.72632      78.99737     117.81842     149.87778     124.98889 \nvar_diff_plac \n    341.33333 \n\n# treatment and placebo standard deviations\noutput_summary_stats(bp_list, stat = \"sd\")\n\n  sd_pre_trt  sd_post_trt  sd_diff_trt  sd_pre_plac sd_post_plac sd_diff_plac \n    8.702087     8.888046    10.854419    12.242458    11.179843    18.475209 \n\n# treatment and placebo minimums\noutput_summary_stats(bp_list, stat = \"min\")\n\n  min_pre_trt  min_post_trt  min_diff_trt  min_pre_plac min_post_plac \n          115           114           -24           114           105 \nmin_diff_plac \n          -21 \n\n# treatment and placebo maximums\noutput_summary_stats(bp_list, stat = \"max\")\n\n  max_pre_trt  max_post_trt  max_diff_trt  max_pre_plac max_post_plac \n          151           146            21           152           143 \nmax_diff_plac \n           33"
  }
]